#!/usr/bin/env python2

import urlparse

from calibre.ebooks.readability import readability
from calibre.web.feeds import templates
from calibre.web.feeds.news import BasicNewsRecipe
from lxml.cssselect import CSSSelector
from lxml.html import document_fromstring, fragment_fromstring, tostring
from lxml.html.builder import BODY, DIV, H2, HEAD, HTML, TITLE


class EmptyNavbar(templates.Template):
    def _generate(self, bottom, feed, art, number_of_articles_in_feed,
                  two_levels, url, __appname__, prefix='', center=True,
                  extra_css=None, style=None):
        self.root = DIV()


class HintjensBlog(BasicNewsRecipe):
    title = 'Moving Pieces'
    url = 'http://hintjens.com/'
    cover_url = 'http://hintjens.wdfiles.com/local--files/nav:side/culture.jpg'
    reverse_article_order = True

    blacklist_urls = [
            # The Psychopath Code
            '/blog:78',
            '/blog:82',
            '/blog:87',
            '/blog:88',
            '/blog:89',
            '/blog:90',
            '/blog:91',
            '/blog:92',
    ]

    oldest_article = 365 * 1000
    max_articles_per_feed = 500

    ARTICLES_SELECTOR = CSSSelector('#page-content .list-pages-item')
    ARTICLE_TITLE_SELECTOR = CSSSelector('strong a')
    ARTICLE_TIMESTAMP_SELECTOR = CSSSelector('.odate')

    PRINT_FRIENDLY_URL = 'http://hintjens.com/printer--friendly/'

    def __init__(self, options, log, progress_reporter):
        BasicNewsRecipe.__init__(self, options, log, progress_reporter)

        self.navbar = EmptyNavbar()

    def parse_index(self):
        index_tree = self.index_to_soup(self.url, as_tree=True)
        articles_tree = self.ARTICLES_SELECTOR(index_tree)
        articles = [self._parse_article(t) for t in articles_tree]
        ok_articles = [a for a in articles
                       if a['url'] not in self.blacklist_urls]
        return [(self.title, ok_articles)]

    def print_version(self, url):
        return urlparse.urljoin(self.PRINT_FRIENDLY_URL, url[1:])

    def _parse_article(self, tree):
        title_tag = self.ARTICLE_TITLE_SELECTOR(tree)[0]
        url = title_tag.get('href')

        timestamp_tag = self.ARTICLE_TIMESTAMP_SELECTOR(tree)[0]
        timestamp = float([cn.lstrip('time_')
                           for cn in timestamp_tag.get('class').split()
                           if cn.startswith('time_')][0])

        return {
                'title': title_tag.text,
                'url': url,
                'timestamp': timestamp,
                'description': '',
                'content': '',
        }

    def preprocess_raw_html(self, raw_html, url):
        raw = document_fromstring(raw_html)

        title = CSSSelector('#page-title')(raw)[0].text

        article = CSSSelector('#page-content')(raw)[0]

        CSSSelector('div.comments-box')(article)[0].clear()
        CSSSelector('div.page-rate-widget')(article)[0].getparent().clear()
        CSSSelector('span.avatarhover')(article)[0].getparent().clear()
        CSSSelector('div.list-pages-box')(article)[0].getparent().getparent().clear()
        cleaned = tostring(article, encoding=unicode)

        doc = readability.Document(cleaned, self.log, url=url,
                                   keep_elements=self.auto_cleanup_keep)
        readable = fragment_fromstring(doc.summary())

        root = HTML(HEAD(TITLE(title)),
                    BODY(H2(title), readable))
        return tostring(root, encoding=unicode)

    def postprocess_book(self, oeb, opts, log):
        index_id = oeb.manifest.hrefs['index.html'].id
        oeb.manifest.remove(index_id)
