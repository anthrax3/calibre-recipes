#!/usr/bin/env python2

import urlparse

from calibre.web.feeds import templates
from calibre.web.feeds.news import BasicNewsRecipe
from datetime import datetime as dt
from lxml.cssselect import CSSSelector
from lxml.html.builder import DIV


class EmptyNavbar(templates.Template):
    def _generate(self, bottom, feed, art, number_of_articles_in_feed,
                 two_levels, url, __appname__, prefix='', center=True,
                 extra_css=None, style=None):
        self.root = DIV()


class HintjensBlog(BasicNewsRecipe):
    title = 'Moving Pieces'
    url = 'http://hintjens.com/'
    cover_url = 'http://hintjens.wdfiles.com/local--files/nav:side/culture.jpg'
    reverse_article_order = True
    auto_cleanup = True

    # TODO: remove limits
    delay = 1
    max_articles_per_feed = 35

    blacklist_urls = [
            # The Psychopath Code
            '/blog:78',
            '/blog:82',
            '/blog:87',
            '/blog:88',
            '/blog:89',
            '/blog:90',
            '/blog:91',
            '/blog:92',
    ]

    ARTICLES_SELECTOR = CSSSelector('#page-content .list-pages-item')
    ARTICLE_TITLE_SELECTOR = CSSSelector('strong a')
    ARTICLE_TIMESTAMP_SELECTOR = CSSSelector('.odate')

    PRINT_FRIENDLY_URL = 'http://hintjens.com/printer--friendly/'

    def __init__(self, options, log, progress_reporter):
        BasicNewsRecipe.__init__(self, options, log, progress_reporter)

        self.navbar = EmptyNavbar()

    def parse_index(self):
        index_tree = self.index_to_soup(self.url, as_tree=True)
        articles_tree = self.ARTICLES_SELECTOR(index_tree)
        articles = [self._parse_article(t) for t in articles_tree]
        ok_articles = [a for a in articles
                       if a['url'] not in self.blacklist_urls]
        return [(self.title, ok_articles)]

    def print_version(self, url):
        return urlparse.urljoin(self.PRINT_FRIENDLY_URL, url[1:])

    def _parse_article(self, tree):
        title_tag = self.ARTICLE_TITLE_SELECTOR(tree)[0]

        url = title_tag.get('href')

        timestamp_tag = self.ARTICLE_TIMESTAMP_SELECTOR(tree)[0]
        timestamp = [cn.lstrip('time_')
                     for cn in timestamp_tag.get('class').split()
                     if cn.startswith('time_')][0]
        isodate = dt.utcfromtimestamp(float(timestamp)).isoformat()

        return {
                'title': title_tag.text,
                'url': url,
                'date': isodate,
                'description': '',
                'content': '',
        }

    def preprocess_html(self, soup):
        soup.find('span', 'printuser avatarhover').parent.extract()
        return soup

    def postprocess_book(self, oeb, opts, log):
        index_id = oeb.manifest.hrefs['index.html'].id
        oeb.manifest.remove(index_id)
